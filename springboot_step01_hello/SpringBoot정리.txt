1.스프링 부트 
웹 어플리케이션을 개발하는데 있어 스프링처럼 많은 설정을 필요로 하지 않고 개발자가 좀더 쉽게 접근하여
개발에만 전념할수 있도록 개발된 오픈소스 프레임 워크이다.

2. 스프링 부트의 장점
a.라이브러리 관리 자동화: Maven이나 Gradle을 이용해서 관리
b.설정의 자동화: 화면개발에 Thymeleaf를 이용해 자동설정
c.라이브러리 버전 자동관리
d.테스트환경과 내장 톰켓: JUnit을 비롯한 테스트 관련 라이브러리 제공, 톰캣 내장
e.독립적으로 실행 가능한 JAR: 개발이 끝난 시점에 서버에 배포하기 위한 패키징 처리, 
                                         독립적인 실행을 위해 웹 어플리케이션도 jar파일로 패키징 할수 있다

3. 구조

처리영역                  프레임워크                설명
-------------------------------------------------------------------------------------------------------
Presentation       MVC                   Model,View,Controller아키텍쳐를 제공한다
Business             IoC,AOP            스프링 컨테이너에서 동작하는 비즈니스 컴포넌를 개발한다
Persistence         JPA                    JAP(Java Persistent API)는 ORM(Object Releation Mapping) 프레임워크의 표준이다
                        Mybatis             XML파일에 작성한 SQL을 자바 객체(VO)와 매핑해주는 데이터 매퍼이다


4. JPA(Java Persistence API)
데이터베이스를 연동하는 기술은 JDBC, 스프링 DAO, MyBatis, Hibernte같은 ORM등 다양하다.
Hibernate은 SQL까지 프레임워크에서 제공하기 때문에 개발자의 일을 엄청나게 줄여준다
JPA는 ORM보다 쉽게 사용할수 있도록 표준화 시킨 프레임워크이다.

H2데이터베이스
  : 오라클, MySQL, DB2, Inforix등과 같은 데이터베이스이며 스프링 부트가 기본적으로
    H2를 지원한다. 용량이 작고 실행 속도가 빠른 오픈 소스이다.
    JDBC와 메모리, 서버모드등 모두 지원한다.

Dialect 클래스 설정
: JPA의 가장 큰 장점은 데이터베이스 연동에 필요한 SQL구문을 자동 생성한다.

(1)JPA가 지원하는 Dialect 클래스

데이터베이스              Dialect 클래스
--------------------------------------------------
Oracle 9i/10g       org.hibernate.dialect.Oracle9Dialect      
MySQL                org.hibernate.dialect.MySQLDialect 
H2                      org.hibernate.dialect.H2Dialect 

(2)JAP구현체 설정

속성                                                             의미
------------------------------------------------------------------- 
hibernate.show_sql                                    하이버네이트가 생성한 SQL을 콘솔에 출력한다
hibernate.format_sql                                 하이버네이트가 출력한 SQL을 보기좋은 포멧으로 한다      
hibernate.use_sql_comments                     SQL에 포함된 주석도 같이 출력한다
hibernate.id.new_generator_mappings     키 생성 전략을 사용한다
hibernate.hbm2ddl.auto                             테이블 생성(create)이나 변경(alter),삭제(drop)같은
                                                                     DDL구문을 자동으로 실행할지 지정한다. 
*hibernate.hbm2ddl.auto 옵션
create: 기존의 테이블을 삭제하고 엔티티에 설정된 정보를 참조해서 새로운 테이블 생성(drop->create)
dreate-drop: create와 같지만 종료되기 직전에 생성된 테이블을 생성한다(drop->create->drop)
update: 기존에 테이블이 있으면 새로 생성하지 않는다,엔티티 클래스의 매핑 설정이 변경되면 변경된 내용만 반영한다(alter)

(3)Entity 관련 어노테이션
@Table: 엔티티 이름과 테이블이름이 다른경우에 매핑할 테이블 이름 지정
@Id: 기본키
@GeneratedValue: 식별자 자동 값증가
속성                설명
----------------------------------
strategy      자동 생성 속성을 설정한다
generator     이미 생성된 키를 참조한다

PK속성                      설명
---------------------------------------------------------------------
GenerationType.TABLE      PK값만을 생성하기 위한 별도의 테이블을 만들어야 한다
GenerationType.SEQUENCE   시퀀스를 이용해서 PK를 생성한다 시퀀스를 지원하는 데이터베이스에서만 사용가능하다
GenerationType.IDENTITY   auto_increment나 IDENTITY를 이용해서 PK생성
                          일반적으로 MySQL데이터베이스를 사용할때 쓴다
GenerationType.AUTO       자동생성한다(기본값)

@Temporal : Date타입의 날자 매핑(DATE, TIME, TIMESTAMP)


(4)EntityManager가 제공하는 CRUD
메서드                 설명
-----------------------------------------------
persist             엔티티를 영속화 한다(insert)
merge               준 영속상태의 엔티티를 영속화 한다(update)
remove              영속상태의 엔티티를 제거한다(delete)
find                하나의 엔티티를 검색한다(select one)   
createQuery         엔티티목록을 검색한다(select list)


[CRUD기능 테스트]
메서드                                     기능
-----------------------------------------------------------------------------------------------
count                                       모든 엔티티의 개수 리턴
delete(id)                                  식별키를 통한 삭제
delete(Iterable<? Extends T>)       주어진 모든 엔티티삭제
deleteAll()                                 모든 엔티티 삭제
exists(id)                                   식별키를 가진 엔티티가 존재하는지 확인
findAllById(id)                            모든 엔티티 목록 리턴
findAll()                                     해당 식별키를 가진 엔티티 목록 리턴
findById(id)                                해당 식별키에 해당하는 단일 엔티티 리턴
saveAll<Iterable>                        여러 엔티티를 한번에 등록,수정
save                                          하나의 엔티티 등록,수정

(5)Page객체
 : 스프링 MVC에서 검색결과를 사용하기 위해 Page객체를 사용하면 페이징 처리할때 사용할 수 있는
   다양한 정보를 제공받을수 있다.

메서드                      설명
--------------------------------------------------
getNumber()                현재 페이지 정보
getSize()                  한 페이지의 크기
getTotalPages()            전체 페이지 수
getNumberOfElements()      결과 데이터 수
hasPreviousPage()          이전 페이지의 존재여부
hasNextPage()              다음 페이지의 존재여부
isLastPage()               마지막 페이지 여부
nextPageable()             다음 페이지 객체
previousPageable()         이전 페이지 객체  
getContent()               조회된 데이터 목록
hasContent()               결과 존재 여부
getSort()                  검색시 사용된 Sort정보

(6)JPQL(Java Persistence Query Language) 
   JPQL은 일반적인 SQL과 유사한 문법을 가지고 있지만 검색 대상이 테이블이 아니라 영속성 컨테이너에 등록된 엔티티이다.
   
   [작성규칙]
   - FROM절에 엔티티 이름을 대소문자를 구분하여 정확히 지정해야 한다.
   - 컬럼 대신 엔티티가 가지고 있는 변수를 조회하기 때문에 SELECT나 WHERE절에서 사용하는 
     변수 이름 역시 대소문자를 구분해야 한다.
   - 사용자 입력값을 바인딩 할수 있도록 위치기반 파라미터와 이름기반 파라미터 2가지를 지원한다.
      ex) '?1' ==> 첫번째 파라미터를 의미

(7)@Query어노테이션
 : 연관 관계 처리인 join검색을 처리하기 위해서는 JPQL(Java Persistence Query Language)를 사용해야 한다
   이를 위해 제공된 어노테이션이다.
   

(8)QueryDSL
 : QueryDSL(Query Domain Specific Language)는 MyBatis처럼 동적으로 쿼리를 작성할수 있는 프로젝트이다.
   쿼리를 문자열이 아닌 자바코드로 작성할수 있도록 지원하는 일종의 JPQL빌더이다. 처음에는 하이버네이트에서 지원하는 
   HQL(Hibernate Query Language)을 코드로 개발하려고 만들었으나 지금은 JPA, JDO, JDBC Lucene,
   Hibernate Search, 몽고DB, 자바컬렉션등 다양하게 지원한다.
  
   [사용방법]
   https://mvcrepository.com 에서 querydsl로 검색
   Querydsl JPA와 Querydsl APT 두개를 사용한다.

   [QueryDSL 플러그인 추가]
     pom.xml(오른쪽 버튼) -> Maven -> Add Plugin 
     Group Id: com.mysema.maven
     Artifact Id: apt-maven-plugin
     version: 1.1.3

   DynamicBoardRepository가 제공 메서드
   메서드        설명
   ------------------------------------
   count()      검색된 데이터 전체 개수
   exists()     검색된 데이터 존재여부
   findAll()    조건에 맞는 모든 데이터 목록 
   find()       조건에 맞는 하나의 데이터


5. 스프링부트 화면개발
스프링부트는 템플릿엔진을 이용한 화면처리를 지원한다. 
엔진의 종류로는 타임리프(Thymeleaf), Freemaker,Mustache, Groovy, Templates등이 있다.

(1)타임리프(Thymeleaf)
 JSP는 스프링 부트가 권장하지 않을 뿐더러 라이브러리 조차 제공하지 않는다.
 스프링 부트가 JSP를 권장하지 않는 이유는 스프링 부트가 독립적으로 실행 가능한 애플리케이션을 
 빠르고 쉽게 만드는 것을 목표로 하기 때문이다.
 따라서, war이 아닌 jar로 패키징 할수 있도록 지원하는 것이다.
 스프링 부트는 JSP기반의 화면 개발 대신 타임리프와 같은 템플릿엔진을 사용해서 
 화면을 개발하도록 권고하고 있다.

(2)타임리프 출력하기
 웹 파일                           경로
 ---------------------------------------------------------
 정적 HTML파일               src/main/resource/static
                           src/main/public
 웹 페이지의 대표 아이콘        src/main/resources/favicon.ico
 (Favicon)
 템플릿                      src/main/resources/templates


6. 스프링 부트 시큐리티
인증(Authentication)과 인가(Authorization)의 개념은 전혀 다르다.
일반적으로 인증을 통해 사용자를 식별하고 인가를 통해 시스템의 자원에 접근을 제한한다.

[HttpSecurity가 제공하는 메서드]
메서드                           의미
------------------------------------------------------------------------------------
authorizeRequests()        사용자 권한과 인증 설정
antMatchers("URL패턴")  매칭되는 url 패턴들에 대한 접근 허용
                                   permitAll()은 모든 사용자에게 접근 허용
                                   hasRole("권한")은 특정 권한을 가진 사용자만 접근 허용
formLogin()                   로그인 페이지 설정
loginPage("login")          로그인에 필요한 url로 접근하면 '/login'화면으로 이동
logout()                        로그아웃 페이지 설정
logoutUrl('/logout')        로그아웃을 처리하는 페이지 설정
csrf()                            csrf는 크로스사이트 위조 요청에 대한 설정
disable()                        RESTfull을 사용하기 위해서는 csrf기능을 비활성화해야 함
